// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Aitako.DSL
{
    using System.Text;
    using System.Linq;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;
    using Aitako.DSL;
    using Aitako.DSL.Components;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AggregateGenerator : AggregateGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\nusing System;\r\nusing Cuttlefish.Common;\r\nusing Cuttlefish;\r\nusing System.Web." +
                    "Mvc;\r\n\r\nnamespace ");
            
            #line 17 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Make.BaseNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tpublic class DomainController : Controller\r\n\t{\r\n\t");
            
            #line 21 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(var aggregate in Aggregate.All){ 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 22 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Command command in aggregate.Commands){ 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t public JsonResult ");
            
            #line 24 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 24 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterList(command.Parameters)));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t{\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar command = new ");
            
            #line 27 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 27 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterListWithoutTypes(command.Parameters)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\tCommandRouter.ExecuteCommand(command);\r\n\t\t\t\t\treturn this.JsonResponse(tr" +
                    "ue);\r\n\t\t\t\t} catch(Exception ex){\r\n\t\t\t\t\treturn this.JsonResponse(false, ex);\r\n\t\t\t" +
                    "\t\tthrow;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t");
            
            #line 35 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 36 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\t}\r\n}\r\n");
            
            #line 39 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 SaveOutput("..\\Controllers",  "DomainController.cs"); 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 42 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(var aggregate in Aggregate.All){ 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 44 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Header(aggregate.Name); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 46 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Event @event in aggregate.Events){ 
            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 47 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@event.Name));
            
            #line default
            #line hidden
            this.Write(" : IEvent\r\n{\r\n\tprivate readonly int _version;\r\n    public int Version { get { ret" +
                    "urn _version; } }\r\n\r\n\t");
            
            #line 52 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Parameter parameter in @event.Parameters){ 
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 53 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResolveType(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 53 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" { get; private set; }\r\n\t");
            
            #line 54 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n    private ");
            
            #line 56 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@event.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n\t{\r\n\t\t_version = 1;\r\n\t}\r\n   \r\n    public ");
            
            #line 61 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@event.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 61 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterList(@event.Parameters)));
            
            #line default
            #line hidden
            this.Write(") : this()\r\n    {\r\n\t\t");
            
            #line 63 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Parameter parameter in @event.Parameters){ 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 64 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 64 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t");
            
            #line 65 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            
            #line 68 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 70 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Footer(); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 72 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 SaveOutput(aggregate.Name,  "Events.cs"); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 74 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Header(aggregate.Name); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 76 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Command command in aggregate.Commands){ 
            
            #line default
            #line hidden
            this.Write(" \r\npublic class ");
            
            #line 78 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write(" : ICommand\r\n{\r\n    private readonly int _version;\r\n    public int Version { get " +
                    "{ return _version; } }\r\n\r\n\t");
            
            #line 83 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Parameter parameter in command.Parameters){ 
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 84 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResolveType(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 84 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" { get; private set; }\r\n\t");
            
            #line 85 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n    private ");
            
            #line 87 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n\t{\r\n\t\t_version = 1;\r\n\t}\r\n  \r\n    public ");
            
            #line 92 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 92 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ParameterList(command.Parameters)));
            
            #line default
            #line hidden
            this.Write(") : this()\r\n    {\r\n\t\t");
            
            #line 94 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Parameter parameter in command.Parameters){ 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 95 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 95 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t");
            
            #line 96 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n");
            
            #line 100 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 102 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Footer(); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 104 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 SaveOutput(aggregate.Name,  "Commands.cs"); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 106 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Header(aggregate.Name); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 108 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

	var aggregateName = aggregate.Name;

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 112 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 if(string.IsNullOrEmpty(aggregate.Parent))
{

            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 115 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(aggregateName));
            
            #line default
            #line hidden
            this.Write(" : AggregateBase\r\n");
            
            #line 116 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("public class ");
            
            #line 121 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(aggregateName));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 121 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(aggregate.Parent));
            
            #line default
            #line hidden
            this.Write("Aggregate\r\n");
            
            #line 122 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

}

            
            #line default
            #line hidden
            this.Write("{\r\n\r\n\r\npublic ");
            
            #line 128 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(aggregateName));
            
            #line default
            #line hidden
            this.Write("() : base(new List<IEvent>()) { }\r\npublic ");
            
            #line 129 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(aggregateName));
            
            #line default
            #line hidden
            this.Write("(IEnumerable<IEvent> events) : base(events){}\r\n\r\n");
            
            #line 131 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Field field in aggregate.Fields){ 
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 132 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResolveType(field.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 132 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(" { get; protected set; }\r\n");
            
            #line 133 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 135 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Command command in aggregate.Commands){ 
            
            #line default
            #line hidden
            this.Write("public void On(");
            
            #line 136 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(command.Name));
            
            #line default
            #line hidden
            this.Write(" cmd)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n");
            
            #line 140 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 142 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 foreach(Event @event in aggregate.Events){ 
            
            #line default
            #line hidden
            this.Write("public void When(");
            
            #line 143 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@event.Name));
            
            #line default
            #line hidden
            this.Write(" evt)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n");
            
            #line 147 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n}\r\n\r\n");
            
            #line 151 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 Footer(); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 153 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 SaveOutput(aggregate.Name,  aggregate.Name+ ".cs"); 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 155 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 159 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 public string ResolveType(Type type){	
	return type.Name;
} 
        
        #line default
        #line hidden
        
        #line 163 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 public string ParameterList(List<Parameter> parameters){	
	var parameterList = string.Empty;

	foreach( var parameter in parameters){
		parameterList += string.Format("{0} {1}",ResolveType(parameter.Type), parameter.Name.ToLower());
		if ( parameter != parameters.Last()){
			parameterList+=", ";
        }
    }

	return parameterList;
} 
        
        #line default
        #line hidden
        
        #line 176 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 public string ParameterListWithoutTypes(List<Parameter> parameters){	
	var parameterList = string.Empty;

	foreach( var parameter in parameters){
		parameterList += string.Format("{0}", parameter.Name.ToLower());
		if ( parameter != parameters.Last()){
			parameterList+=", ";
        }
    }

	return parameterList;
} 
        
        #line default
        #line hidden
        
        #line 189 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 public void Header(string aggregate){	
        
        #line default
        #line hidden
        
        #line 189 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
this.Write("\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Cuttlefish;\r\nusing Cutt" +
        "lefish.Common;\r\n\r\nnamespace ");

        
        #line default
        #line hidden
        
        #line 196 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Make.BaseNamespace));

        
        #line default
        #line hidden
        
        #line 196 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
this.Write(" {\r\n");

        
        #line default
        #line hidden
        
        #line 197 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
} 
        
        #line default
        #line hidden
        
        #line 199 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
 public void Footer(){	
        
        #line default
        #line hidden
        
        #line 199 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 201 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
} 
        
        #line default
        #line hidden
        
        #line 203 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

  void SaveOutput(string subFolder, string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) +"\\"+ Make.BoundedContextName + "\\" + subFolder;
	  Directory.CreateDirectory(templateDirectory);

      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AggregateGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
