// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Aitako.DSL.Components;
using Microsoft.VisualStudio.TextTemplating;

namespace Aitako.DSL
{
    /// <summary>
    ///     Class to produce the template output
    /// </summary>
#line 1 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AggregateGenerator : AggregateGeneratorBase
    {
#line hidden
        /// <summary>
        ///     Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write("\r\n\r\nusing System;\r\nusing Cuttlefish.Common;\r\nusing Cuttlefish;\r\nusing System.We" +
                  "b.Mvc;\r\n\r\nnamespace ");

#line 17 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(Make.BaseNamespace));

#line default
#line hidden
            Write("\r\n{\r\n\tpublic class DomainController : Controller\r\n\t{\r\n\t");

#line 21 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            foreach (DomainObjectGeneratorBase aggregate in DomainObjectGeneratorBase.All)
            {
#line default
#line hidden
                Write("\t\t");

#line 22 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Command command in aggregate.Commands)
                {
#line default
#line hidden
                    Write(" \r\n\t\t public JsonResult ");

#line 24 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write("(");

#line 24 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(ParameterList(command.Parameters)));

#line default
#line hidden
                    Write(")\r\n\t\t\t{\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar command = new ");

#line 27 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write("(");

#line 27 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(ParameterListWithoutTypes(command.Parameters)));

#line default
#line hidden
                    Write(
                        ");\r\n\t\t\t\t\tCommandRouter.ExecuteCommand(command);\r\n\t\t\t\t\treturn this.JsonResponse(tr" +
                        "ue);\r\n\t\t\t\t} catch(Exception ex){\r\n\t\t\t\t\treturn this.JsonResponse(false, ex);\r\n\t\t\t" +
                        "\t\tthrow;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t");

#line 35 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\t");

#line 36 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            }

#line default
#line hidden
            Write("\t}\r\n}\r\n");

#line 39 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            SaveOutput("..\\Controllers", "DomainController.cs");

#line default
#line hidden
            Write("\r\n\r\n");

#line 42 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            foreach (DomainObjectGeneratorBase aggregate in DomainObjectGeneratorBase.All)
            {
#line default
#line hidden
                Write("\r\n");

#line 44 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Header(aggregate.Name);

#line default
#line hidden
                Write("\r\n");

#line 46 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Event @event in aggregate.Events)
                {
#line default
#line hidden
                    Write(" \r\npublic class ");

#line 48 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write(" : IEvent\r\n{\r\n\tprivate readonly int _Version;\r\n    public int Version { get { ret" +
                          "urn _Version; } }\r\n\r\n\t");

#line 53 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    foreach (Parameter parameter in @event.Parameters)
                    {
#line default
#line hidden
                        Write("\tpublic ");

#line 54 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(ResolveType(parameter.Type)));

#line default
#line hidden
                        Write(" ");

#line 54 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name));

#line default
#line hidden
                        Write(" { get; private set; }\r\n\t");

#line 55 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    }

#line default
#line hidden
                    Write("\r\n    public ");

#line 57 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write("()\r\n\t{\r\n\t\t_Version = 1;\r\n\t}\r\n   \r\n    public ");

#line 62 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write("(");

#line 62 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(ParameterList(@event.Parameters)));

#line default
#line hidden
                    Write(") : this()\r\n    {\r\n\t\t");

#line 64 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    foreach (Parameter parameter in @event.Parameters)
                    {
#line default
#line hidden
                        Write("\t\t");

#line 65 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name));

#line default
#line hidden
                        Write(" = ");

#line 65 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name.ToLower()));

#line default
#line hidden
                        Write(";\r\n\t\t");

#line 66 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    }

#line default
#line hidden
                    Write("    }\r\n}\r\n\r\n");

#line 70 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\r\n");

#line 72 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Footer();

#line default
#line hidden
                Write("\r\n");

#line 74 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                SaveOutput(aggregate.Name, "Events.cs");

#line default
#line hidden
                Write("\r\n");

#line 76 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Header(aggregate.Name);

#line default
#line hidden
                Write("\r\n");

#line 78 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Command command in aggregate.Commands)
                {
#line default
#line hidden
                    Write(" \r\npublic class ");

#line 80 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write(" : ICommand\r\n{\r\n    private readonly int _Version;\r\n    public int Version { get " +
                          "{ return _Version; } }\r\n\r\n\t");

#line 85 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    foreach (Parameter parameter in command.Parameters)
                    {
#line default
#line hidden
                        Write("\tpublic ");

#line 86 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(ResolveType(parameter.Type)));

#line default
#line hidden
                        Write(" ");

#line 86 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name));

#line default
#line hidden
                        Write(" { get; private set; }\r\n\t");

#line 87 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    }

#line default
#line hidden
                    Write("\r\n    public ");

#line 89 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write("()\r\n\t{\r\n\t\t_Version = 1;\r\n\t}\r\n  \r\n    public ");

#line 94 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write("(");

#line 94 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(ParameterList(command.Parameters)));

#line default
#line hidden
                    Write(") : this()\r\n    {\r\n\t\t");

#line 96 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    foreach (Parameter parameter in command.Parameters)
                    {
#line default
#line hidden
                        Write("\t\t");

#line 97 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name));

#line default
#line hidden
                        Write(" = ");

#line 97 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(parameter.Name.ToLower()));

#line default
#line hidden
                        Write(";\r\n\t\t");

#line 98 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    }

#line default
#line hidden
                    Write("    }\r\n}\r\n\r\n");

#line 102 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\r\n");

#line 104 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Footer();

#line default
#line hidden
                Write("\r\n");

#line 106 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                SaveOutput(aggregate.Name, "Commands.cs");

#line default
#line hidden
                Write("\r\n");

#line 108 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Header(aggregate.Name);

#line default
#line hidden
                Write("\r\n");

#line 110 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

                string aggregateName = aggregate.Name;


#line default
#line hidden
                Write("\r\n");

#line 114 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                if (string.IsNullOrEmpty(aggregate.Parent))
                {
#line default
#line hidden
                    Write("public class ");

#line 117 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(aggregateName));

#line default
#line hidden
                    Write(" : AggregateBase\r\n");

#line 118 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }
                else
                {
#line default
#line hidden
                    Write("public class ");

#line 123 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(aggregateName));

#line default
#line hidden
                    Write(" : ");

#line 123 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(aggregate.Parent));

#line default
#line hidden
                    Write("Aggregate\r\n");

#line 124 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }


#line default
#line hidden
                Write("{\r\n\r\n\r\npublic ");

#line 130 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(aggregateName));

#line default
#line hidden
                Write("() : base(new List<IEvent>()) { }\r\npublic ");

#line 131 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(aggregateName));

#line default
#line hidden
                Write("(IEnumerable<IEvent> events) : base(events){}\r\n\r\n");

#line 133 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Field field in aggregate.Fields)
                {
#line default
#line hidden
                    Write("\tpublic ");

#line 134 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(ResolveType(field.Type)));

#line default
#line hidden
                    Write(" ");

#line 134 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                    Write(" { get; protected set; }\r\n");

#line 135 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\r\n");

#line 137 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Command command in aggregate.Commands)
                {
#line default
#line hidden
                    Write("public void On(");

#line 138 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(command.Name));

#line default
#line hidden
                    Write(" cmd)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n");

#line 142 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\r\n");

#line 144 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                foreach (Event @event in aggregate.Events)
                {
#line default
#line hidden
                    Write("public void When(");

#line 145 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write(" evt)\r\n{\r\n    throw new NotImplementedException();\r\n}\r\n");

#line 149 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                }

#line default
#line hidden
                Write("\r\n}\r\n\r\n");

#line 153 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                Footer();

#line default
#line hidden
                Write("\r\n");

#line 155 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
                SaveOutput(aggregate.Name, aggregate.Name + ".cs");

#line default
#line hidden
                Write("\r\n");

#line 157 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            }

#line default
#line hidden
            Write("\r\n\r\n\r\n");
            return GenerationEnvironment.ToString();
        }

        /// <summary>
        ///     The current host for the text templating engine
        /// </summary>
        public virtual ITextTemplatingEngineHost Host { get; set; }

#line 161 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        public string ResolveType(Type type)
        {
            return type.Name;
        }

#line default
#line hidden

#line 165 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        public string ParameterList(List<Parameter> parameters)
        {
            string parameterList = string.Empty;

            foreach (Parameter parameter in parameters)
            {
                parameterList += string.Format("{0} {1}", ResolveType(parameter.Type), parameter.Name.ToLower());
                if (parameter != parameters.Last())
                {
                    parameterList += ", ";
                }
            }

            return parameterList;
        }

#line default
#line hidden

#line 178 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        public string ParameterListWithoutTypes(List<Parameter> parameters)
        {
            string parameterList = string.Empty;

            foreach (Parameter parameter in parameters)
            {
                parameterList += string.Format("{0}", parameter.Name.ToLower());
                if (parameter != parameters.Last())
                {
                    parameterList += ", ";
                }
            }

            return parameterList;
        }

#line default
#line hidden

#line 191 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        public void Header(string aggregate)
        {
#line default
#line hidden

#line 191 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            Write("\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Cuttlefish;\r\nusing Ait" +
                  "ako.CQRS.Common;\r\n\r\nnamespace ");


#line default
#line hidden

#line 198 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(Make.BaseNamespace));


#line default
#line hidden

#line 198 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            Write(" {\r\n");


#line default
#line hidden

#line 199 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        }

#line default
#line hidden

#line 201 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        public void Footer()
        {
#line default
#line hidden

#line 201 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
            Write("}\r\n");


#line default
#line hidden

#line 203 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"
        }

#line default
#line hidden

#line 205 "C:\Code\Cuttlefish\Aitako.DSL\AggregateGenerator.tt"

        private void SaveOutput(string subFolder, string outputFileName)
        {
            string templateDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\" +
                                       Make.BoundedContextName + "\\" + subFolder;
            Directory.CreateDirectory(templateDirectory);

            string outputFilePath = Path.Combine(templateDirectory, outputFileName);
            File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());

            GenerationEnvironment.Remove(0, GenerationEnvironment.Length);
        }


#line default
#line hidden
    }

#line default
#line hidden

    #region Base class

    /// <summary>
    ///     Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AggregateGeneratorBase
    {
        #region Fields

        private string currentIndentField = "";
        private bool endsWithNewline;
        private CompilerErrorCollection errorsField;
        private StringBuilder generationEnvironmentField;
        private List<int> indentLengthsField;

        #endregion

        #region Properties

        /// <summary>
        ///     The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if ((generationEnvironmentField == null))
                {
                    generationEnvironmentField = new StringBuilder();
                }
                return generationEnvironmentField;
            }
            set { generationEnvironmentField = value; }
        }

        /// <summary>
        ///     The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if ((errorsField == null))
                {
                    errorsField = new CompilerErrorCollection();
                }
                return errorsField;
            }
        }

        /// <summary>
        ///     A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if ((indentLengthsField == null))
                {
                    indentLengthsField = new List<int>();
                }
                return indentLengthsField;
            }
        }

        /// <summary>
        ///     Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get { return currentIndentField; }
        }

        /// <summary>
        ///     Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session { get; set; }

        #endregion

        #region Transform-time helpers

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((GenerationEnvironment.Length == 0)
                 || endsWithNewline))
            {
                GenerationEnvironment.Append(currentIndentField);
                endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture))
            {
                endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((currentIndentField.Length == 0))
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, (Environment.NewLine + currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
            {
                GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - currentIndentField.Length));
            }
            else
            {
                GenerationEnvironment.Append(textToAppend);
            }
        }

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }

        /// <summary>
        ///     Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }

        /// <summary>
        ///     Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new ArgumentNullException("indent");
            }
            currentIndentField = (currentIndentField + indent);
            indentLengths.Add(indent.Length);
        }

        /// <summary>
        ///     Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((indentLengths.Count > 0))
            {
                int indentLength = indentLengths[(indentLengths.Count - 1)];
                indentLengths.RemoveAt((indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = currentIndentField.Substring((currentIndentField.Length - indentLength));
                    currentIndentField = currentIndentField.Remove((currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }

        /// <summary>
        ///     Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            currentIndentField = "";
        }

        #endregion

        #region ToString Helpers

        private readonly ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();

        /// <summary>
        ///     Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get { return toStringHelperField; }
        }

        /// <summary>
        ///     Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField = CultureInfo.InvariantCulture;

            /// <summary>
            ///     Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get { return formatProviderField; }
                set
                {
                    if ((value != null))
                    {
                        formatProviderField = value;
                    }
                }
            }

            /// <summary>
            ///     This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new ArgumentNullException("objectToConvert");
                }
                Type t = objectToConvert.GetType();
                MethodInfo method = t.GetMethod("ToString", new[]
                    {
                        typeof (IFormatProvider)
                    });
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string) (method.Invoke(objectToConvert, new object[]
                        {
                            formatProviderField
                        })));
                }
            }
        }

        #endregion
    }

    #endregion
}